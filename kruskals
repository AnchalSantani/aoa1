#include <stdio.h>
 #include <stdlib.h>
 #define MAX 100
 // Structure to represent an edge
 struct Edge {
    int u, v, weight;
 };
 // Compare function for qsort
 int compare(const void *a, const void *b) {
    return ((struct Edge *)a)->weight - ((struct Edge *)b)->weight;
 }
 int parent[MAX];
 // Find parent (with path compression)
 int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
 }
 // Union operation
 void union_set(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
 }
 int main() {
    int n, e;
    struct Edge edgeList[MAX];
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);
    printf("Enter edges (u v weight):\n");
    for (int i = 0; i < e; i++) {
        scanf("%d%d%d", &edgeList[i].u, &edgeList[i].v, &edgeList[i].weight);
    }
    // Initialize parent array
    for (int i = 0; i < n; i++)
        parent[i] = i;
    // Sort edges by weight
    qsort(edgeList, e, sizeof(struct Edge), compare);
    int count = 0;       // number of edges in MST
    int minCost = 0;
    printf("\nEdges in the Minimum Spanning Tree:\n");
    for (int i = 0; i < e && count < n - 1; i++) {
        int u = edgeList[i].u;
        int v = edgeList[i].v;
        int w = edgeList[i].weight;
        if (find(u) != find(v)) {
            union_set(u, v);
            printf("Edge %d: (%d -> %d) cost = %d\n", count + 1, u, v, w);
            minCost += w;
            count++;
        }
    }
    printf("\nMinimum cost of the spanning tree = %d\n", minCost);
    return 0;
 }
