#include <stdio.h>
 #define MAX 100
 int max(int a, int b) {
    return (a > b) ? a : b;
 }
 // Knapsack function
 int knapsack(int n, int W, int weight[], int profit[], int x[]) {
    int dp[MAX][MAX];
    // Fill dp table
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (weight[i] <= w)
                dp[i][w] = max(profit[i] + dp[i - 1][w - weight[i]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }
    // Print DP Matrix
    printf("\nDP Matrix:\n");
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            printf("%3d ", dp[i][w]);
        }
        printf("\n");
    }
    // Backtrack to find solution vector
    int i = n, k = W;
    while (i > 0 && k > 0) {
        if (dp[i][k] != dp[i - 1][k]) {
            x[i] = 1;  // item i is included
            k = k - weight[i];
        } else {
            x[i] = 0;
        }
        i--;
    }
    return dp[n][W]; // Return total profit
 }
 int main() {
    int n, W;
    int weight[MAX], profit[MAX], x[MAX] = {0};
    printf("Enter number of items: ");
    scanf("%d", &n);
    printf("Enter weights of items:\n");
    for (int i = 1; i <= n; i++)
        scanf("%d", &weight[i]);
    printf("Enter profits of items:\n");
    for (int i = 1; i <= n; i++)
        scanf("%d", &profit[i]);
    printf("Enter capacity of knapsack: ");
    scanf("%d", &W);
    int totalProfit = knapsack(n, W, weight, profit, x);
    // Print solution vector
    printf("\nSolution Vector (1 = included):\n");
    for (int i = 1; i <= n; i++) {
        printf("Item %d: %d\n", i, x[i]);
    }
    printf("\nTotal Profit Earned: %d\n", totalProfit);
    return 0;
 }
