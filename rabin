#include <stdio.h>
 #include <string.h>
 #define d 256  // Number of characters in input alphabet
 void RabinKarpSearch(char pat[], char txt[], int q) {
    int M = strlen(pat);
    int N = strlen(txt);
    int i, j;
    int p = 0;     // hash value for pattern
    int t = 0;     // hash value for text
    int h = 1;
    int matchCount = 0;
    // The value of h would be "pow(d, M-1)%q"
    for (i = 0; i < M - 1; i++)
        h = (h * d) % q;
    // Calculate hash value for pattern and first window of text
    for (i = 0; i < M; i++) {
        p = (d * p + pat[i]) % q;
        t = (d * t + txt[i]) % q;
    }
    printf("\nPattern found at indices: ");
    // Slide the pattern over text
    for (i = 0; i <= N - M; i++) {
        // If hash values match, check for characters one by one
        if (p == t) {
            for (j = 0; j < M; j++) {
                if (txt[i + j] != pat[j])
                    break;
            }
            if (j == M) {
                printf("%d ", i);
                matchCount++;
            }
        }
        // Calculate hash value for next window of text
        if (i < N - M) {
            t = (d * (t - txt[i] * h) + txt[i + M]) % q;
            // Make sure hash is positive
            if (t < 0)
                t = (t + q);
        }
    }
    printf("\nTotal matches found: %d\n", matchCount);
 }
 int main() {
    char txt[100], pat[100];
    int q = 101; // A prime number
    printf("Enter the text: ");
    scanf(" %[^\n]", txt);
    printf("Enter the pattern to search: ");
    scanf(" %[^\n]", pat);
    RabinKarpSearch(pat, txt, q);
    return 0;
}
